(defun iput (k)
  (insert "PUT(key_set[")
  (insert (number-to-string k))
  (insert "]);\n"))

(defun iget (k)
  (insert "GET(key_set[")
  (insert (number-to-string k))
  (insert "]);\n"))

(defun ierase (k)  
  (insert "ERASE(key_set[")
  (insert (number-to-string k))
  (insert "]);\n"))

(defun gen-seq-empty (n gp-ratio hitrate)
  (while (> n 0)
    (iput n)
    (let ((gn gp-ratio))
      (while (> gn 0)
        (if (< (random 100) hitrate)
            (iget n)
          (iget (% (1- n) 100)))
        (setq gn (1- gn))))
    (ierase n)
    (setq n (- n 1))))

(defun gen-seq-normal (n gp-ratio hitrate load deviation)
  (let ((contains '())
        (misses `(,n))
        (ng 0.0) (np 0.0))
    (while (> n 0)
      (setq n (1- n))
      (if (< (+ (length contains)
                (- (random (1+ (* 2 deviation))) deviation))
             load)
          (let ((gn gp-ratio))
            (iput n)
            (setq np (1+ np))
            (push n contains)
            (while (< (/ ng np) gp-ratio)
              (setq ng (1+ ng))
              (if (< (random 100) hitrate)
                  (iget (nth (random (length contains)) contains)))
              (iget (nth (random (length misses)) misses))))
        (let* ((eln (random (length contains)))
               (el (nth eln contains)))
          (setq contains (remove el contains))
          (push el misses)
          (ierase el))))
    (while contains  (ierase (pop contains)))))

(defun gen-seq-matrix (n)
  (dolist (load '(("load5" . 5) ("load50" . 50) ("load95" . 95)))
    (dolist (gpr '(("gp003" . 0.03) ("gp1" . 1) ("gp30" . 30)))
      (dolist (hitr '(("hitr5" . 5) ("hitr50" . 50) ("hitr95" . 95)))
        (insert "START_MEASUREMENT;\n")
        (insert "for (int i=0; i < count; ++i){\n")
        (gen-seq-normal n (cdr gpr) (cdr hitr) (cdr load) 3)
        (insert "}\nREGISTER_MEASUREMENT(")
        (insert (car load)) (insert ", ")
        (insert (car gpr)) (insert ", ")
        (insert (car hitr)) (insert ");\n\n")
        (redisplay)))))
        
              

(defun gen-key-set (n)
  (insert "int key_set[] = \n{")
  (while (> n 0)
    (setq n (1- n))
    (insert (number-to-string (- (random 2147483648) 1073741824)))
    (insert ", "))
  (insert "};\n")) 


(defun gen-csv-template ()
  (insert "load,pg,hitrate,type,val,sigma\n")
  (let ((i 1))
    (dolist (load '(5 50 95))
      (dolist (gpr '(0.03 1 30))
        (dolist (hitr '(5 50 95))
          (dolist (type '("vst" "std" "glib"))
            (insert (number-to-string load)) (insert ",")
            (insert (number-to-string gpr)) (insert ",")
            (insert (number-to-string hitr)) (insert ",")
            (insert type) (insert ",")
            (insert "$v") (insert (number-to-string i))
            (insert ",$e") (insert (number-to-string i))
            (insert "\n")
            (setq i (1+ i))))))))
