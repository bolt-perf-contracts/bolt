#ifndef MULTISET_GH
#define MULTISET_GH

#include "multisubset.gh"

fixpoint bool multiset_eq<t>(list<t> l1, list<t> l2) {
  switch(l1) {
    case nil:
      return l2 == nil;
    case cons(h,t):
      return true == mem(h, l2) && multiset_eq(t, remove(h, l2));
  }
}

lemma void multiset_eq_unremove<t>(list<t> l1, list<t> l2, t x)
requires true == mem(x, l1) &*&
         true == multiset_eq(remove(x, l1), l2);
ensures true == multiset_eq(l1, cons(x, l2));
{
  switch(l1) {
    case nil:
    case cons(h,t):
      if (x != h) multiset_eq_unremove(t, remove(h, l2), x);
  }
}

lemma void multiset_eq_comm<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures true == multiset_eq(l2, l1);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      multiset_eq_comm(t, remove(h, l2));
      assert true == multiset_eq(remove(h, l2), t);
      multiset_eq_unremove(l2, t, h);
      assert true == multiset_eq(l2, l1);
  }
}

lemma void multiset_eq_msubset_rec<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures true == msubset(l1, l2);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      multiset_eq_msubset_rec(t, remove(h, l2));
  }
}

lemma void multiset_eq_msubset<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures true == msubset(l1, l2) &*&
        true == msubset(l2, l1);
{
  multiset_eq_msubset_rec(l1, l2);
  multiset_eq_comm(l1, l2);
  multiset_eq_msubset_rec(l2, l1);
}

lemma void msubset_multiset_eq<t>(list<t> l1, list<t> l2)
requires true == msubset(l1, l2) &*&
         true == msubset(l2, l1);
ensures true == multiset_eq(l1, l2);
{
  switch(l1) {
    case nil:
      msubset_of_nil(l2);
    case cons(h,t):
      msubset_remove(l2, l1, h);
      msubset_multiset_eq(t, remove(h, l2));
  }
}//took 4m

lemma void multiset_eq_subset<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures true == subset(l1, l2);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      multiset_eq_subset(t, remove(h, l2));
      assert true == subset(t, remove(h, l2));
      subset_unremove_outer(t, l2, h);
      assert true == subset(l1, l2);
  }
}

lemma void multiset_eq_set_eq<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures true == set_eq(l1, l2);
{
  multiset_eq_subset(l1, l2);
  multiset_eq_comm(l1, l2);
  multiset_eq_subset(l2, l1);
}

lemma void distinct_set_eq_multiset_eq<t>(list<t> l1, list<t> l2)
requires true == set_eq(l1, l2) &*&
         true == distinct(l1) &*&
         true == distinct(l2);
ensures true == multiset_eq(l1, l2);
{
  switch(l1) {
    case nil:
      subset_nil_nil(l2);
    case cons(h,t):
      remove_still_distinct(l2, h);
      set_eq_remove_both(l1, l2, h);
      distinct_set_eq_multiset_eq(t, remove(h, l2));
      true == multiset_eq(t, remove(h, l2));
      assert true == mem(h, l2);
  }
}

lemma void multiset_eq_refl<t>(list<t> l)
requires true;
ensures true == multiset_eq(l, l);
{
  switch(l) {
    case nil:
    case cons(h,t):
      multiset_eq_refl(t);
  }
}

lemma void cons_in_the_middle_multiset_eq<t>(list<t> l1, list<t> l2, t x)
requires true;
ensures true == multiset_eq(append(l1, cons(x, l2)), cons(x, append(l1, l2)));
{
  switch(l1) {
    case nil:
      multiset_eq_refl(cons(x, l2));
    case cons(h,t):
      cons_in_the_middle_multiset_eq(t, l2, x);
  }
}

lemma void multiset_eq_same_len<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures length(l1) == length(l2);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      length_remove(h, l2);
      multiset_eq_same_len(t, remove(h, l2));
  }
}

lemma void multiset_eq_append_both<t>(list<t> l1, list<t> l2, list<t> l3)
requires true == multiset_eq(l1, l2);
ensures true == multiset_eq(append(l1, l3), append(l2, l3));
{
  switch(l1) {
    case nil:
      multiset_eq_refl(l3);
    case cons(h,t):
      multiset_eq_append_both(t, remove(h, l2), l3);
      assert true == mem(h, append(l2, l3));
      append_remove_first(l2, l3, h);
      assert remove(h, append(l2, l3)) == append(remove(h, l2), l3);
  }
}

lemma void multiset_eq_lift_element<t>(t el, list<t> l)
requires true == mem(el, l);
ensures true == multiset_eq(cons(el, remove(el, l)), l);
{
  switch(l) {
    case nil:
    case cons(h,t):
      if (el == h) {
        multiset_eq_refl(l);
      } else {
        multiset_eq_lift_element(el, t);
      } 
  }
}//took 1m

lemma void multiset_eq_mem<t>(t x, list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures mem(x, l1) == mem(x, l2);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      if (h != x) {
        multiset_eq_mem(x, t, remove(h, l2));
        neq_mem_remove(x, h, l2);
      }
  }
}//took 3m

lemma void multiset_eq_remove<t>(list<t> l1, list<t> l2, t el)
requires true == multiset_eq(l1, l2);
ensures true == multiset_eq(remove(el, l1), remove(el, l2));
{
  switch(l1) {
    case nil:
    case cons(h,t):
      if (h != el) {
        multiset_eq_remove(t, remove(h, l2), el);
        remove_commutes(l2, el, h);
        neq_mem_remove(h, el, l2);
      }
  }
}//took 6m

lemma void multiset_eq_trans<t>(list<t> l1, list<t> l2, list<t> l3)
requires true == multiset_eq(l1, l2) &*&
         true == multiset_eq(l2, l3);
ensures true == multiset_eq(l1, l3);
{
  switch(l1) {
    case nil:
    case cons(h,t):
      multiset_eq_mem(h, l2, l3);
      assert true == multiset_eq(t, remove(h, l2));
      multiset_eq_remove(l2, l3, h);
      multiset_eq_trans(t, remove(h, l2), remove(h, l3));
  }
}//took 3m

lemma void multiset_eq_map_remove_swap<t1,t2>(fixpoint (t1,t2) f,
                                              t1 el, list<t1> l)
requires true == mem(el, l);
ensures true == multiset_eq(map(f, remove(el, l)),
                            remove(f(el), map(f, l)));
{
  switch(l) {
    case nil:
    case cons(h,t):
      if (h == el) {
        multiset_eq_refl(map(f, t));
      } else {
        if (f(h) == f(el)) {
          multiset_eq_map_remove_swap(f, el, t);
          mem_map(el, t, f);
          multiset_eq_lift_element(f(el), map(f, t));
          assert true == multiset_eq(cons(f(el), remove(f(el), map(f, t))),
                                     map(f, t));
          multiset_eq_trans(map(f, remove(el, l)),
                            cons(f(el), remove(f(el), map(f, t))),
                            map(f, t));
        } else {
          multiset_eq_map_remove_swap(f, el, t);
        }
      }
  }
}

lemma void multiset_eq_map<t1,t2>(fixpoint (t1,t2) f,
                                  list<t1> l1,
                                  list<t1> l2)
requires true == multiset_eq(l1, l2);
ensures true == multiset_eq(map(f, l1), map(f, l2));
{
  switch(l1) {
    case nil:
    case cons(h,t):
      mem_map(h, l2, f);
      multiset_eq_map(f, t, remove(h, l2));
      multiset_eq_map_remove_swap(f, h, l2);
      multiset_eq_trans(map(f, t), map(f, remove(h, l2)),
                        remove(f(h), map(f, l2)));
  }
}//took 7m

lemma void multiset_eq_distinct<t>(list<t> l1, list<t> l2)
requires true == multiset_eq(l1, l2);
ensures distinct(l1) == distinct(l2);
{
  multiset_eq_msubset(l1, l2);
  if (distinct(l1)) {
    msubset_distinct(l2, l1);
  }

  if (distinct(l2)) {
    msubset_distinct(l1, l2);
  }
}//took 2m



lemma void multiset_eq_forall<t>(list<t> l1, list<t> l2, fixpoint (t,bool) f)
requires true == multiset_eq(l1, l2);
ensures forall(l1, f) == forall(l2, f);
{
  multiset_eq_msubset(l1, l2);
  if (forall(l1, f)) {
    msubset_forall(l2, l1, f);
  }

  if (forall(l2, f)) {
    msubset_forall(l1, l2, f);
  }
}//took 3m




lemma void multiset_eq_append_assoc<t>(list<t> l1, list<t> l2, list<t> l3)
requires true;
ensures true == multiset_eq(append(append(l1, l2), l3),
                            append(l1, append(l2, l3)));
{
  switch(l1) {
    case nil:
      multiset_eq_refl(append(l2, l3));
    case cons(h,t):
      multiset_eq_append_assoc(t, l2, l3);
  }
}//took 2m




lemma void multiset_eq_append<t>(list<t> l1, list<t> l2,
                                 list<t> l3, list<t> l4)
requires true == multiset_eq(l1, l2) &*&
         true == multiset_eq(l3, l4);
ensures true == multiset_eq(append(l1, l3), append(l2, l4));
{
  multiset_eq_msubset(l1, l2);
  multiset_eq_msubset(l3, l4);
  msubset_append_both(l1, l3, l2, l4);
  msubset_append_both(l2, l4, l1, l3);
  msubset_multiset_eq(append(l1, l3), append(l2, l4));
}//took 5m




lemma void multiset_eq_append_comm<t>(list<t> l1, list<t> l2)
requires true;
ensures true == multiset_eq(append(l1, l2), append(l2, l1));
{
  msubset_append_swap(l1, l2);
  msubset_append_swap(l2, l1);
  msubset_multiset_eq(append(l1, l2), append(l2, l1));
}//took 2m




lemma void multiset_eq_map_cons_remove<t1,t2>(fixpoint (t1,t2) f,
                                              list<t1> l,
                                              t1 x, t1 y)
requires true == mem(x, l) &*& f(x) == f(y);
ensures true == multiset_eq(map(f, l),
                            map(f, cons(y, remove(x, l))));
{
  switch(l) {
    case nil:
    case cons(h,t):
      if (h == x) {
        multiset_eq_refl(map(f, l));
      }
      else {
        multiset_eq_map_cons_remove(f, t, x, y);
      }
  }
}

lemma void map_remove_swap<t1,t2>(fixpoint (t1,t2) f,
                                  t1 x, list<t1> l)
requires true == mem(x, l);
ensures true == multiset_eq(remove(f(x), map(f, l)),
                            map(f, remove(x, l)));
{
  switch(l) {
    case nil:
    case cons(h,t):
      if (h == x) {
        multiset_eq_refl(map(f, remove(x, l)));
      } else {
        if (f(h) == f(x)) {
          multiset_eq_map_cons_remove(f, t, x, h);
        } else {
          map_remove_swap(f, x, t);
        }
      }
  }
}//took 40m

lemma void multiset_eq_lift_element_append<t>(t el, list<t> l1, list<t> l2)
requires true == mem(el, l2);
ensures true == multiset_eq(append(l1, l2),
                            append(cons(el, l1), remove(el, l2)));
{
  switch(l1) {
    case nil:
      multiset_eq_lift_element(el, l2);
      multiset_eq_comm(cons(el, remove(el, l2)), l2);
    case cons(h,t):
      multiset_eq_lift_element_append(el, t, l2);
  }
}//took 1m

lemma void multiset_remove_append_swap<t>(t x, list<t> l1, list<t> l2)
requires true == mem(x, l2);
ensures true == multiset_eq(remove(x, append(l1, l2)),
                            append(l1, remove(x, l2)));
{
  switch(l1) {
    case nil:
      multiset_eq_refl(remove(x, l2));
    case cons(h,t):
      if (x == h) {
        multiset_eq_lift_element_append(x, t, l2);
        assert true == multiset_eq(append(t, l2),
                                   append(cons(x, t), remove(x, l2)));
      } else {
        multiset_remove_append_swap(x, t, l2);
        assert true == multiset_eq(remove(x, append(t, l2)),
                                   append(t, remove(x, l2)));
        assert true == multiset_eq(remove(x, append(l1, l2)),
                                   append(l1, remove(x, l2)));
      }
  }
}//took 9m

#endif//MULTISET_GH
